val implementation: {{Vela.Feature.Name}}Implementation
  get() = internalImplementation
private var internalImplementation : {{Vela.Feature.Name}}Implementation = {{Vela.Feature.Name}}Implementation.getDefault()

inner class {{Vela.Feature.Name}}Implementation private constructor(builder: {{Vela.Feature.Name}}FeatureBuilder.{{Vela.Feature.Name}}.BuilderImplementation): IFeature {

    companion object {
        fun getDefault() = {{Vela.Feature.Children.Implementations.Default}}

{{Vela.Feature.Children.Implementations.Code.Fields.Instance}};

        fun getByName(name: String) =
            when(name) {
{{Vela.Feature.Children.Implementations.Code.Cases}}
                else -> getDefault()
            }
    }

    override val parent: {{Vela.Feature.Name}}Feature = this@{{Vela.Feature.Name}}Feature
    override val root = parent.root

    override val dependencies: List<IDependable> = listOf(
{{Vela.Feature.Dependencies.List}}
    )

    override val dependent: List<IDependable> = listOf(
{{Vela.Feature.Dependencies.Dependents.List}}
    )

    override val isEnabled : Boolean
       get() = internalEnabled && currentActive

    private var internalEnabled = isDefault
    internal val currentActive : Boolean
      get() = this@{{Vela.Feature.Name}}Feature.isEnabled

    override fun enable() : {{Vela.Feature.Name}}Implementation {
        if( !IS_MUTABLE)
            throw FeaturesImmutableException()

        ensureFeatures(dependencies)
        parent.enable()
        internalImplementation.disable
        internalEnabled = true
        internalImplementation = this
    }

    override fun disable() : {{Vela.Feature.Name}}Implementation {
        if( !IS_MUTABLE)
            throw FeaturesImmutableException()

        ensureDisabled(dependents)
        internalEnabled = false
        {{Vela.Feature.Name}}Implementation.getDefault.enable()
    }
}

fun selectImplementation(impl: {{Vela.Feature.Name}}Implementation) {
    impl.enable()
}
