package {{vela.pkg.current}}

fun ensureFeatures(vararg features: IFeature) \{
    ensureFeatures(features.toList())
\}

fun ensureFeatures(features: List<IFeature> ) \{
    val missingFeatures = features
        .filter \{ it.isEnabled.not() \}
        .toList()

    if (missingFeatures.isNotEmpty()) \{
        throw FeatureDependenciesNotSatisfiedException(
            "The following feature(s) should have been enabled, but were not:\\n" +
                    missingFeatures.joinToString(";\\n") \{ "    $it" \},
            missingFeatures
        )
    \}
\}

fun ensureDisabled(dependents: List<IFeature>) \{
    val critical = dependents
        .filter \{ it.isEnabled \}
        .toList()

    if (critical.isNotEmpty()) \{
        throw DisablingActiveDependencyException(
            "Tried to disable a dependency whilst dependent features were still active:\\n" +
                    critical.joinToString(";\\n") \{ "    $it" \},
            critical
        )
    \}
\}

class FeatureDependenciesNotSatisfiedException(msg: String, val missing: List<IFeature>) : RuntimeException(msg)
class DisablingActiveDependencyException(msg: String, val critical: List<IFeature>) : RuntimeException(msg)
class FeaturesImmutableException() : RuntimeException("Features are already built and may not be altered any more")